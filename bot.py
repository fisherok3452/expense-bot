import os
import json
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from collections import defaultdict
from datetime import timedelta


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8114366222:AAHWPOiMQIanq-DcRmNEvam5aLyxKu1AOY8"  # —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
DATA_FILE = "data.json"
DAILY_LIMIT = 60
CATEGORY, AMOUNT, COMMENT = range(3)

CATEGORIES = [
    "–µ–¥–∞", "–∫–∞—Ñ–µ", "–ø–æ–∫—É–ø–∫–∏", "–∞–ª–∫–æ–≥–æ–ª—å", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "–ø–æ–¥–∞—Ä–∫–∏", "–∑–¥–æ—Ä–æ–≤—å–µ", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "–ø—Ä–æ—á–µ–µ"
]

# === –î–ê–ù–ù–´–ï ===
def get_today():
    return datetime.now().strftime("%Y-%m-%d")

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

data = load_data()

def ensure_user(user_id):
    today = get_today()
    if user_id not in data:
        data[user_id] = {}
    if today not in data[user_id]:
        data[user_id][today] = {
            "balance": DAILY_LIMIT,
            "expenses": []
        }

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", callback_data="add")],
        [
            InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton("üìã –¢—Ä–∞—Ç—ã", callback_data="expenses")
        ],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞—Ç—É", callback_data="delete_last")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data_choice = query.data
    user_id = str(query.from_user.id)
    ensure_user(user_id)

    if data_choice == "balance":
        bal = data[user_id][get_today()]["balance"]
        await query.message.reply_text(f"–û—Å—Ç–∞—Ç–æ–∫: ${bal:.2f}")
    elif data_choice == "expenses":
        expenses = data[user_id][get_today()]["expenses"]
        if not expenses:
            await query.message.reply_text("–¢—Ä–∞—Ç –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            msg = "\n".join([f"- {e['category']}: ${e['amount']} ({e.get('comment', '')})" for e in expenses])
            await query.message.reply_text("–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞—Ç—ã:\n" + msg)
    elif data_choice == "delete_last":
        exp = data[user_id][get_today()]["expenses"]
        if exp:
            last = exp.pop()
            data[user_id][get_today()]["balance"] += last["amount"]
            save_data(data)
            await query.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: {last['category']} - ${last['amount']}")
        else:
            await query.message.reply_text("–ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    elif data_choice == "add":
        cat_buttons = [[InlineKeyboardButton(cat, callback_data=cat)] for cat in CATEGORIES]
        markup = InlineKeyboardMarkup(cat_buttons)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        return CATEGORY

# === –ü–û–®–ê–ì–û–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ê–¢ ===
async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["category"] = query.data
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    return AMOUNT

async def enter_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        if amount <= 0:
            raise ValueError
        context.user_data["amount"] = amount
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ /skip:")
        return COMMENT
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
        return AMOUNT

async def enter_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await finalize_expense(update, context, update.message.text)

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await finalize_expense(update, context, "")

async def finalize_expense(update: Update, context: ContextTypes.DEFAULT_TYPE, comment):
    user_id = str(update.effective_user.id)
    ensure_user(user_id)

    today = get_today()
    amount = context.user_data["amount"]
    category = context.user_data["category"]
    balance = data[user_id][today]["balance"]

    if amount > balance:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        data[user_id][today]["balance"] -= amount
        data[user_id][today]["expenses"].append({
            "amount": amount,
            "category": category,
            "comment": comment
        })
        save_data(data)

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", callback_data="add")],
            [
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                InlineKeyboardButton("üìã –¢—Ä–∞—Ç—ã", callback_data="expenses")
            ],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞—Ç—É", callback_data="delete_last")]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {category} - ${amount:.2f}",
            reply_markup=markup
        )

    return ConversationHandler.END

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    today = datetime.now().date()
    stats = defaultdict(float)
    total = 0.0

    for i in range(7):
        day = (today - timedelta(days=i)).strftime("%Y-%m-%d")
        day_data = data.get(user_id, {}).get(day, {}).get("expenses", [])
        for e in day_data:
            stats[e["category"]] += e["amount"]
            total += e["amount"]

    if not total:
        await update.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:\n"]
    for category, amount in sorted(stats.items(), key=lambda x: -x[1]):
        percent = (amount / total) * 100
        lines.append(f"- {category.capitalize()}: ${amount:.2f} ({percent:.1f}%)")

    lines.append(f"\n–ò—Ç–æ–≥–æ: ${total:.2f}")
    await update.message.reply_text("\n".join(lines))


# === –ê–í–¢–û–°–ë–†–û–° ===
def setup_daily_reset():
    scheduler = AsyncIOScheduler()

    def reset():
        today = get_today()
        for user_id in data:
            data[user_id][today] = {
                "balance": DAILY_LIMIT,
                "expenses": []
            }
        save_data(data)
        print(f"[‚è∞] –ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω: {today}")

    scheduler.add_job(reset, "cron", hour=0, minute=0)
    scheduler.start()

async def post_init(app):
    setup_daily_reset()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^add$")],
        states={
            CATEGORY: [CallbackQueryHandler(choose_category)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_amount)],
            COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_comment),
                CommandHandler("skip", skip_comment)
            ]
        },
        fallbacks=[CommandHandler("skip", skip_comment)],
        per_chat=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("stats", show_stats))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
